/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package healthswift.pkgcase.study;

import static healthswift.pkgcase.study.HealthSwift.encrypt;
import static healthswift.pkgcase.study.HealthSwift.pnlPatientDashboard;
import static healthswift.pkgcase.study.HealthSwift.pnlSignIn;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.Time;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.chrono.ChronoLocalDateTime;

/**
 *
 * @author Kheymp
 */
public class PanelPatientDashboard extends javax.swing.JPanel {
    UserDoctor userDoctor = new UserDoctor();
    PatientRegistrationForm patientRegistrationForm = new PatientRegistrationForm();
    private String currentDoctorLicense = "";
    /**
     * Creates new form PanelPatientDashboard
     */
    public PanelPatientDashboard() {
        this.setBounds(0, 0, 800, 600);
        this.setVisible(false);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser = new com.raven.datechooser.DateChooser();
        timePicker = new com.raven.swing.TimePicker();
        pnlSignIn = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dashDoctorNote = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dashPatientAge = new javax.swing.JTextField();
        dashPatientEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        dashPatientStatus = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        dashPatientBirthDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        dashPatientName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        dashPatientRelationship = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        dashPatientAddress = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        dashPatientContact = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        dashPatientEmergency = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        dashPatientGender = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        dashPatientBMI = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        dashPatientHeight = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        dashPatientWeight = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        dashBMIClass = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dashAdditionalInfo = new javax.swing.JTextArea();
        dashPatientBlood = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        chooseDoctor = new javax.swing.JComboBox<>();
        btnSetAppointment = new javax.swing.JButton();
        dashSpecialty = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        selectTime = new javax.swing.JTextField();
        selectDate = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        lblMonTime = new javax.swing.JLabel();
        lblTueTime = new javax.swing.JLabel();
        lblWedTime = new javax.swing.JLabel();
        lblThurTime = new javax.swing.JLabel();
        lblFriTime = new javax.swing.JLabel();
        lblSatTime = new javax.swing.JLabel();
        btnBackToSignIn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        dateChooser.setDateFormat("yyyy-MM-dd");
        dateChooser.setTextRefernce(selectDate);

        timePicker.set24hourMode(true);
        timePicker.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                timePickerFocusGained(evt);
            }
        });
        timePicker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timePickerMouseClicked(evt);
            }
        });

        setPreferredSize(new java.awt.Dimension(800, 600));

        pnlSignIn.setBackground(new java.awt.Color(51, 102, 255));
        pnlSignIn.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel18.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel18.setText("Doctor's Note");
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, -1, -1));

        dashDoctorNote.setEditable(false);
        dashDoctorNote.setColumns(20);
        dashDoctorNote.setLineWrap(true);
        dashDoctorNote.setRows(5);
        jScrollPane2.setViewportView(dashDoctorNote);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 320, 50));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 350, 340, 120));

        jPanel3.setBackground(new java.awt.Color(153, 204, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel6.setText("User Information");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, -1, -1));

        jLabel2.setText("Address:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 50, -1));

        jLabel3.setText("Age:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 40, -1));

        dashPatientAge.setEditable(false);
        jPanel3.add(dashPatientAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 60, -1));

        dashPatientEmail.setEditable(false);
        jPanel3.add(dashPatientEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 90, 120, -1));

        jLabel4.setText("Birthdate:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        dashPatientStatus.setEditable(false);
        jPanel3.add(dashPatientStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, 120, -1));

        jLabel5.setText("Gender:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 50, -1));

        dashPatientBirthDate.setEditable(false);
        jPanel3.add(dashPatientBirthDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 120, -1));

        jLabel7.setText("Name:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 50, -1));

        dashPatientName.setEditable(false);
        jPanel3.add(dashPatientName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 120, -1));

        jLabel8.setText("Contact No.:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 60, 80, -1));

        dashPatientRelationship.setEditable(false);
        jPanel3.add(dashPatientRelationship, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 180, 120, -1));

        jLabel9.setText("Email:");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 90, 50, -1));

        dashPatientAddress.setEditable(false);
        jPanel3.add(dashPatientAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 190, -1));

        jLabel10.setText("Emergency:");
        jLabel10.setToolTipText("");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 150, 70, -1));

        dashPatientContact.setEditable(false);
        jPanel3.add(dashPatientContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, 120, -1));

        jLabel11.setText("Relationship:");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 180, 80, -1));

        dashPatientEmergency.setEditable(false);
        jPanel3.add(dashPatientEmergency, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 150, 120, -1));

        jLabel13.setText("Status:");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 50, -1));

        dashPatientGender.setEditable(false);
        jPanel3.add(dashPatientGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 120, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 410, 220));

        jPanel4.setBackground(new java.awt.Color(153, 204, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel12.setText("Medical Information");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, -1, -1));

        jLabel14.setText("BMI:");
        jPanel4.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 40, -1));

        dashPatientBMI.setEditable(false);
        jPanel4.add(dashPatientBMI, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 80, -1));

        jLabel15.setText("Height:");
        jPanel4.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 50, -1));

        dashPatientHeight.setEditable(false);
        jPanel4.add(dashPatientHeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 80, -1));

        jLabel16.setText("Weight:");
        jPanel4.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 50, -1));

        dashPatientWeight.setEditable(false);
        jPanel4.add(dashPatientWeight, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 80, -1));

        jLabel17.setText("Classification:");
        jPanel4.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 90, -1));

        dashBMIClass.setEditable(false);
        jPanel4.add(dashBMIClass, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 80, -1));

        jLabel22.setText("Blood type:");
        jPanel4.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 70, -1));

        dashAdditionalInfo.setEditable(false);
        dashAdditionalInfo.setColumns(20);
        dashAdditionalInfo.setLineWrap(true);
        dashAdditionalInfo.setRows(5);
        jScrollPane1.setViewportView(dashAdditionalInfo);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 230, 150));

        dashPatientBlood.setEditable(false);
        jPanel4.add(dashPatientBlood, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 80, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 410, 230));

        jPanel5.setBackground(new java.awt.Color(153, 204, 255));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel19.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel19.setText("Set an Appointment");
        jPanel5.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 0, -1, -1));

        jLabel23.setText("Choose a doctor:");
        jPanel5.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 100, -1));

        chooseDoctor.setToolTipText("");
        chooseDoctor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chooseDoctorItemStateChanged(evt);
            }
        });
        chooseDoctor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                chooseDoctorFocusGained(evt);
            }
        });
        chooseDoctor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chooseDoctorMouseClicked(evt);
            }
        });
        chooseDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseDoctorActionPerformed(evt);
            }
        });
        jPanel5.add(chooseDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 220, -1));

        btnSetAppointment.setBackground(new java.awt.Color(255, 153, 255));
        btnSetAppointment.setText("Set");
        btnSetAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetAppointmentActionPerformed(evt);
            }
        });
        jPanel5.add(btnSetAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 300, -1, -1));

        dashSpecialty.setEditable(false);
        jPanel5.add(dashSpecialty, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 110, -1));

        jLabel24.setText("Specialty:");
        jPanel5.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 60, -1));

        jLabel25.setText("Date:");
        jPanel5.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 270, 40, -1));

        selectTime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectTimeMouseClicked(evt);
            }
        });
        selectTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTimeActionPerformed(evt);
            }
        });
        jPanel5.add(selectTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 300, 100, -1));

        selectDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDateActionPerformed(evt);
            }
        });
        jPanel5.add(selectDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 270, 100, -1));

        jLabel26.setText("Time:");
        jPanel5.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 300, 40, -1));

        jPanel6.setBackground(new java.awt.Color(204, 204, 255));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel27.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(0, 0, 204));
        jLabel27.setText("Tuesday");
        jPanel6.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        jLabel28.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 0, 204));
        jLabel28.setText("Wednesday");
        jPanel6.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, -1));

        jLabel29.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(0, 0, 204));
        jLabel29.setText("Thursday");
        jPanel6.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, -1, -1));

        jLabel30.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(0, 0, 204));
        jLabel30.setText("Friday");
        jPanel6.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, -1));

        jLabel31.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(0, 0, 204));
        jLabel31.setText("Saturday");
        jPanel6.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, -1, -1));

        jLabel32.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(0, 0, 204));
        jLabel32.setText("Monday");
        jPanel6.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, -1, -1));

        lblMonTime.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblMonTime.setForeground(new java.awt.Color(0, 0, 204));
        lblMonTime.setText("00:00");
        jPanel6.add(lblMonTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 120, -1));

        lblTueTime.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblTueTime.setForeground(new java.awt.Color(0, 0, 204));
        lblTueTime.setText("00:00");
        jPanel6.add(lblTueTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 120, -1));

        lblWedTime.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblWedTime.setForeground(new java.awt.Color(0, 0, 204));
        lblWedTime.setText("00:00");
        jPanel6.add(lblWedTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 120, -1));

        lblThurTime.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblThurTime.setForeground(new java.awt.Color(0, 0, 204));
        lblThurTime.setText("00:00");
        jPanel6.add(lblThurTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 120, -1));

        lblFriTime.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblFriTime.setForeground(new java.awt.Color(0, 0, 204));
        lblFriTime.setText("00:00");
        jPanel6.add(lblFriTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 120, -1));

        lblSatTime.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblSatTime.setForeground(new java.awt.Color(0, 0, 204));
        lblSatTime.setText("00:00");
        jPanel6.add(lblSatTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 120, -1));

        jPanel5.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 290, 160));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, 340, 330));

        pnlSignIn.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 780, 480));

        btnBackToSignIn.setBackground(new java.awt.Color(255, 102, 102));
        btnBackToSignIn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        btnBackToSignIn.setText("Sign Out");
        btnBackToSignIn.setToolTipText("");
        btnBackToSignIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToSignInActionPerformed(evt);
            }
        });
        pnlSignIn.add(btnBackToSignIn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 100, -1));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Patient Dashboard");
        jLabel1.setToolTipText("");
        pnlSignIn.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, 30, 800, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlSignIn, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pnlSignIn, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chooseDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseDoctorActionPerformed
        try {
            String doctorName = chooseDoctor.getSelectedItem().toString();
            String query = "SELECT * FROM doctor WHERE name=?";
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/healthswift?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "password");
            java.sql.PreparedStatement prestate = connection.prepareStatement(query);
            prestate.setString(1, doctorName);
            java.sql.ResultSet rs = prestate.executeQuery();
            if (rs.next()) {
                dashSpecialty.setText(rs.getString("specialty"));
                currentDoctorLicense = rs.getString("licenseNo");
                lblMonTime.setText(rs.getTime("mondayStart").toString() + "-" + rs.getTime("mondayEnd").toString());
                lblTueTime.setText(rs.getTime("tuesdayStart").toString() + "-" + rs.getTime("tuesdayEnd").toString());
                lblWedTime.setText(rs.getTime("wednesdayStart").toString() + "-" + rs.getTime("wednesdayEnd").toString());
                lblThurTime.setText(rs.getTime("thursdayStart").toString() + "-" + rs.getTime("thursdayEnd").toString());
                lblFriTime.setText(rs.getTime("fridayStart").toString() + "-" + rs.getTime("fridayEnd").toString());
                lblSatTime.setText(rs.getTime("saturdayStart").toString() + "-" + rs.getTime("saturdayEnd").toString());
            }
        } catch (SQLException ex) {
            Logger.getLogger(PanelPatientDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        } catch (NullPointerException e) {
            
        }
        
        
        
        
        
    }//GEN-LAST:event_chooseDoctorActionPerformed

    private void btnSetAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetAppointmentActionPerformed
        
        
        if (selectDate.getText().equals("") || selectTime.getText().equals("") || chooseDoctor.getSelectedItem().toString().equals("")) {
            JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            LocalDate selectedDate = LocalDate.parse(selectDate.getText());
            LocalTime selectedTime = LocalTime.parse(selectTime.getText());
            LocalTime selectedEndTime = selectedTime.plusMinutes(30);
            Boolean validAppointment = false;
            
            try {
            String check = "SELECT * FROM doctor WHERE licenseNo = ?";
            
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/healthswift?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "password");
            java.sql.PreparedStatement ps = connection.prepareStatement(check);
            
            ps.setString(1, currentDoctorLicense);
            java.sql.ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                if (selectedDate.getDayOfWeek().toString().equalsIgnoreCase("MONDAY")) {
                    
                    LocalTime startTime = LocalTime.parse(rs.getTime("mondayStart").toString());
                    LocalTime endTime = LocalTime.parse(rs.getTime("mondayEnd").toString());
                    if (selectedTime.isBefore(startTime) || selectedDate.isBefore(LocalDate.now())) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else if (selectedTime.isAfter(endTime)) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        validAppointment = true;
                        String tableName = currentDoctorLicense + "appointment";
                        System.out.println(tableName);
                        
                        String insertAppointment = "INSERT INTO " + tableName + "(email, name, timeStart, timeEnd, date) VALUES (?, ?, ?, ?, ?)";
                        java.sql.PreparedStatement ps2 = connection.prepareStatement(insertAppointment);
                        //ps2.setString(1, tableName);
                        ps2.setString(1, dashPatientEmail.getText());
                        ps2.setString(2, dashPatientName.getText());
                        ps2.setTime(3, java.sql.Time.valueOf(selectedTime));
                        ps2.setTime(4, java.sql.Time.valueOf(selectedEndTime));
                        ps2.setDate(5, java.sql.Date.valueOf(selectedDate));
                        
                        ps2.execute();
                        
                        JOptionPane.showMessageDialog(null, "Valid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else if (selectedDate.getDayOfWeek().toString().equalsIgnoreCase("TUESDAY")) {
                    LocalTime startTime = LocalTime.parse(rs.getTime("tuesdayStart").toString());
                    LocalTime endTime = LocalTime.parse(rs.getTime("tuesdayEnd").toString());
                    if (selectedTime.isBefore(startTime) || selectedDate.isBefore(LocalDate.now())) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else if (selectedTime.isAfter(endTime)) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        validAppointment = true;
                        String tableName = currentDoctorLicense + "appointment";
                        System.out.println(tableName);
                        
                        String insertAppointment = "INSERT INTO " + tableName + "(email, name, timeStart, timeEnd, date) VALUES (?, ?, ?, ?, ?)";
                        java.sql.PreparedStatement ps2 = connection.prepareStatement(insertAppointment);
                        //ps2.setString(1, tableName);
                        ps2.setString(1, dashPatientEmail.getText());
                        ps2.setString(2, dashPatientName.getText());
                        ps2.setTime(3, java.sql.Time.valueOf(selectedTime));
                        ps2.setTime(4, java.sql.Time.valueOf(selectedEndTime));
                        ps2.setDate(5, java.sql.Date.valueOf(selectedDate));
                        
                        ps2.execute();
                        
                        JOptionPane.showMessageDialog(null, "Valid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else if (selectedDate.getDayOfWeek().toString().equalsIgnoreCase("WEDNESDAY")) {
                    LocalTime startTime = LocalTime.parse(rs.getTime("wednesdayStart").toString());
                    LocalTime endTime = LocalTime.parse(rs.getTime("wednesdayEnd").toString());
                    if (selectedTime.isBefore(startTime) || selectedDate.isBefore(LocalDate.now())) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else if (selectedTime.isAfter(endTime)) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        validAppointment = true;
                        String tableName = currentDoctorLicense + "appointment";
                        System.out.println(tableName);
                        
                        String insertAppointment = "INSERT INTO " + tableName + "(email, name, timeStart, timeEnd, date) VALUES (?, ?, ?, ?, ?)";
                        java.sql.PreparedStatement ps2 = connection.prepareStatement(insertAppointment);
                        //ps2.setString(1, tableName);
                        ps2.setString(1, dashPatientEmail.getText());
                        ps2.setString(2, dashPatientName.getText());
                        ps2.setTime(3, java.sql.Time.valueOf(selectedTime));
                        ps2.setTime(4, java.sql.Time.valueOf(selectedEndTime));
                        ps2.setDate(5, java.sql.Date.valueOf(selectedDate));
                        
                        ps2.execute();
                        
                        JOptionPane.showMessageDialog(null, "Valid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else if (selectedDate.getDayOfWeek().toString().equalsIgnoreCase("THURSDAY")) {
                    LocalTime startTime = LocalTime.parse(rs.getTime("thursdayStart").toString());
                    LocalTime endTime = LocalTime.parse(rs.getTime("thursdayEnd").toString());
                    if (selectedTime.isBefore(startTime) || selectedDate.isBefore(LocalDate.now())) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else if (selectedTime.isAfter(endTime)) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        validAppointment = true;
                        String tableName = currentDoctorLicense + "appointment";
                        System.out.println(tableName);
                        
                        String insertAppointment = "INSERT INTO " + tableName + "(email, name, timeStart, timeEnd, date) VALUES (?, ?, ?, ?, ?)";
                        java.sql.PreparedStatement ps2 = connection.prepareStatement(insertAppointment);
                        //ps2.setString(1, tableName);
                        ps2.setString(1, dashPatientEmail.getText());
                        ps2.setString(2, dashPatientName.getText());
                        ps2.setTime(3, java.sql.Time.valueOf(selectedTime));
                        ps2.setTime(4, java.sql.Time.valueOf(selectedEndTime));
                        ps2.setDate(5, java.sql.Date.valueOf(selectedDate));
                        
                        ps2.execute();
                        
                        JOptionPane.showMessageDialog(null, "Valid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else if (selectedDate.getDayOfWeek().toString().equalsIgnoreCase("FRIDAY")) {
                    LocalTime startTime = LocalTime.parse(rs.getTime("fridayStart").toString());
                    LocalTime endTime = LocalTime.parse(rs.getTime("fridayEnd").toString());
                    if (selectedTime.isBefore(startTime) || selectedDate.isBefore(LocalDate.now())) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else if (selectedTime.isAfter(endTime)) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        validAppointment = true;
                        String tableName = currentDoctorLicense + "appointment";
                        System.out.println(tableName);
                        
                        String insertAppointment = "INSERT INTO " + tableName + "(email, name, timeStart, timeEnd, date) VALUES (?, ?, ?, ?, ?)";
                        java.sql.PreparedStatement ps2 = connection.prepareStatement(insertAppointment);
                        //ps2.setString(1, tableName);
                        ps2.setString(1, dashPatientEmail.getText());
                        ps2.setString(2, dashPatientName.getText());
                        ps2.setTime(3, java.sql.Time.valueOf(selectedTime));
                        ps2.setTime(4, java.sql.Time.valueOf(selectedEndTime));
                        ps2.setDate(5, java.sql.Date.valueOf(selectedDate));
                        
                        ps2.execute();
                        
                        JOptionPane.showMessageDialog(null, "Valid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else if (selectedDate.getDayOfWeek().toString().equalsIgnoreCase("SATURDAY")) {
                    LocalTime startTime = LocalTime.parse(rs.getTime("saturdayStart").toString());
                    LocalTime endTime = LocalTime.parse(rs.getTime("saturdayEnd").toString());
                    if (selectedTime.isBefore(startTime) || selectedDate.isBefore(LocalDate.now())) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else if (selectedTime.isAfter(endTime)) {
                        validAppointment = false;
                        JOptionPane.showMessageDialog(null, "Invalid appointment!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        validAppointment = true;
                        String tableName = currentDoctorLicense + "appointment";
                        System.out.println(tableName);
                        
                        String insertAppointment = "INSERT INTO " + tableName + "(email, name, timeStart, timeEnd, date) VALUES (?, ?, ?, ?, ?)";
                        java.sql.PreparedStatement ps2 = connection.prepareStatement(insertAppointment);
                        //ps2.setString(1, tableName);
                        ps2.setString(1, dashPatientEmail.getText());
                        ps2.setString(2, dashPatientName.getText());
                        ps2.setTime(3, java.sql.Time.valueOf(selectedTime));
                        ps2.setTime(4, java.sql.Time.valueOf(selectedEndTime));
                        ps2.setDate(5, java.sql.Date.valueOf(selectedDate));
                        
                        ps2.execute();
                        
                        JOptionPane.showMessageDialog(null, "Appointment set successfully!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
            
            } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Appointment is already set!", "Warning!", JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(PanelPatientDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        
        
    }//GEN-LAST:event_btnSetAppointmentActionPerformed

    private void btnBackToSignInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToSignInActionPerformed
        HealthSwift.pnlPatientDashboard.setVisible(false);
        HealthSwift.animationPanel.setVisible(true);
        HealthSwift.pnlSignIn.setVisible(true);
        HealthSwift.pnlPatientDashboard.chooseDoctor.removeAllItems();
    }//GEN-LAST:event_btnBackToSignInActionPerformed

    private void chooseDoctorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseDoctorMouseClicked
        
    }//GEN-LAST:event_chooseDoctorMouseClicked

    private void chooseDoctorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chooseDoctorItemStateChanged
        
    }//GEN-LAST:event_chooseDoctorItemStateChanged

    private void chooseDoctorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_chooseDoctorFocusGained
        
    }//GEN-LAST:event_chooseDoctorFocusGained

    private void selectTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectTimeActionPerformed
        
    }//GEN-LAST:event_selectTimeActionPerformed

    private void selectTimeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectTimeMouseClicked
        timePicker.showPopup(this, 100, 100);
        selectTime.setText(timePicker.getSelectedTime().substring(0, timePicker.getSelectedTime().length() - 3) + ":00");
    }//GEN-LAST:event_selectTimeMouseClicked

    private void timePickerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timePickerMouseClicked
        
    }//GEN-LAST:event_timePickerMouseClicked

    private void timePickerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timePickerFocusGained
        selectTime.setText(timePicker.getSelectedTime().substring(0, timePicker.getSelectedTime().length() - 3) + ":00");
    }//GEN-LAST:event_timePickerFocusGained

    private void selectDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDateActionPerformed

    }//GEN-LAST:event_selectDateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnBackToSignIn;
    private javax.swing.JButton btnSetAppointment;
    public javax.swing.JComboBox<String> chooseDoctor;
    public javax.swing.JTextArea dashAdditionalInfo;
    public javax.swing.JTextField dashBMIClass;
    public javax.swing.JTextArea dashDoctorNote;
    public javax.swing.JTextField dashPatientAddress;
    public javax.swing.JTextField dashPatientAge;
    public javax.swing.JTextField dashPatientBMI;
    public javax.swing.JTextField dashPatientBirthDate;
    public javax.swing.JTextField dashPatientBlood;
    public javax.swing.JTextField dashPatientContact;
    public javax.swing.JTextField dashPatientEmail;
    public javax.swing.JTextField dashPatientEmergency;
    public javax.swing.JTextField dashPatientGender;
    public javax.swing.JTextField dashPatientHeight;
    public javax.swing.JTextField dashPatientName;
    public javax.swing.JTextField dashPatientRelationship;
    public javax.swing.JTextField dashPatientStatus;
    public javax.swing.JTextField dashPatientWeight;
    private javax.swing.JTextField dashSpecialty;
    private com.raven.datechooser.DateChooser dateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JLabel lblFriTime;
    public javax.swing.JLabel lblMonTime;
    public javax.swing.JLabel lblSatTime;
    public javax.swing.JLabel lblThurTime;
    public javax.swing.JLabel lblTueTime;
    public javax.swing.JLabel lblWedTime;
    private javax.swing.JPanel pnlSignIn;
    private javax.swing.JTextField selectDate;
    private javax.swing.JTextField selectTime;
    private com.raven.swing.TimePicker timePicker;
    // End of variables declaration//GEN-END:variables
}
